----------------------------------------------------------------------------------
    -- ORACLE
----------------------------------------------------------------------------------
-- CRIAR BASES MANUALMENTE
CREATE TABLE TESTE (
    NOME1     VARCHAR2(100)  NOT NULL,
    NUMERO1   NUMBER(5,2)    NOT NULL,
    NOME2     VARCHAR(100)   NULL,
    NOME3     VARCHAR(20)    NULL,
    DATA1     DATE           NOT NULL
) NOLOGGING COMPRESS FOR QUERY HIGH PCTFREE 0

-- DELETA TABELA
DROP TABLE TESTE_SYSDATE; -- a tabela deletada vai para a lixeira
DROP TABLE TESTE_SYSDATE PURGE; -- a tabela deletada não poderá ser resgatada

-- CRIA TABELA - COMPRESS
CREATE TABLE TESTE_SYSDATE NOLOGGING COMPRESS FOR QUERY HIGH PCTFREE 0 AS
SELECT SYSDATE FROM DUAL;
;

-- JUNCAO DE DUAS TABELAS
SELECT * 
FROM OWNER.NOME_TABELA_A A
LEFT JOIN OWNER.NOME_TABELA_B B ON A.CHAVE=B.CHAVE
WHERE VAR_A='A' AND VAR_B='B'
;

-- COMPARTILHAR TABELAS
GRANT SELECT ON RANK_MODEL TO OWNERS;

-- RETORNA A BASE DELETADA
FLASHBACK TABLE BASE_DE_DADOS TO BEFORE DROP;

-- UNPIVOT
SELECT * 
FROM(
    SELECT CHAVE, 
         , CANAL_01
         , CANAL_02
         , INTERAC_01
         , INTERAC_02 
    FROM CANAL
)
UNPIVOT
(
    (CANAL, INTERACOES)
    FOR PRODUTO IN (("CANAL_01","INTERAC_01") AS 'GRUPO_01', 
                    ("CANAL_02","INTERAC_02") AS 'GRUPO_02')
)
ORDER BY CHAVE, PRODUTO DESC;

-- PREENCHE O CAMPO ATÉ DAR O NÚMERO DE CARACTERES
SELECT LPAD('123456', 11, '0') from dual;

-- TABELA QUE MOSTRA OS DETALHES DOS COMPARTILHAMENTOS
SELECT * FROM all_tab_privs_made;

-- SUBSTITUI O VALOR MISSING
SELECT NVL(VAR, 0) FROM DUAL;
SELECT COALESCE(VAR, 0) FROM DUAL;

-- LEAD OR LAG DE UMA COLUNA (usa a tabela teste)
SELECT deptno,
       empno,
       ename,
       job,
       sal,
       LAG(sal, 1, 0) OVER (PARTITION BY deptno ORDER BY sal) AS sal_prev, -- LINHA ANTERIOR
       LEAD(SAL,1,0) OVER (PARTITION BY deptno ORDER BY SAL) AS SAL_POS -- LINHA POSTERIOR
FROM   emp;

---------------------------------------------------------------------
-- PERCENTILE_CONT - MEDIANA
---------------------------------------------------------------------
SELECT DEPTNO,
       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SAL DESC) "Median cont",
       PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY SAL DESC) "Median disc"
  FROM EMP
  GROUP BY DEPTNO
  ORDER BY DEPTNO;

---------------------------------------------------------------------
-- AMOSTRA ALEATORIA
---------------------------------------------------------------------
-- AMOSTRA ALEATORIA DO TARGET-AMOSTRA BALANCEADA
SELECT /*+PARALLEL(20)*/ * FROM(
  SELECT PUB.*
       , CASE WHEN ROW_NUMBER() OVER (PARTITION BY TARGET_FL ORDER BY DBMS_RANDOM.VALUE()) <= 1000 /*mudar*/ THEN 1 --COLOCAR O TAMANHO DE CADA TARGET
              ELSE 0
              END AS AMOSTRA
  FROM (
        SELECT /*+PARALLEL(20)*/ DT_REFN, CHAVE, TARGET_ FROM ETANIGUCHI.BASE_MDL_PROP_COB
        WHERE PUBLICO_FL=1 AND DT_REFN<>'01/02/20'
        ) PUB
  ORDER BY DBMS_RANDOM.VALUE()
) WHERE AMOSTRA=1;

-- AMOSTRA ALEATORIA DO TARGET
SELECT /*+PARALLEL(20)*/ * FROM(
  SELECT PUB.*
       , CASE WHEN ROW_NUMBER() OVER (ORDER BY DBMS_RANDOM.VALUE()) <= 1000 /*mudar*/ THEN 1 --COLOCAR O TAMANHO DA AMOSTRA
              ELSE 0
              END AS AMOSTRA
  FROM (
        SELECT /*+PARALLEL(20)*/ DT_REFN, CHAVE, TARGET_ FROM TABELA
        WHERE PUBLICO_FL=1 AND DT_REFN<>'01/02/20'
        ) PUB
  ORDER BY DBMS_RANDOM.VALUE()
) WHERE AMOSTRA=1;

---------------------------------------------------------------------
-- INSERT
---------------------------------------------------------------------
-- INSERT 1
INSERT INTO table
(column1, column2, ... column_n )
VALUES
(expression1, expression2, ... expression_n );

-- INSERT 2
INSERT INTO target_table (col1, col2, col3)
SELECT col1,
       col2,
       col3
FROM source_table
WHERE condition;

-- LOOP
DROP TABLE teste PURGE;
CREATE TABLE teste (
    VAR           VARCHAR2(50)   NULL
)NOLOGGING COMPRESS FOR QUERY HIGH PCTFREE 0
;

DECLARE
    i PLS_INTEGER := 0;
BEGIN
    LOOP
        INSERT INTO teste (VAR) VALUES ('var' || i);commit;
        EXIT WHEN (i >= 10);
        i := i + 1;
    END LOOP;
END;

---------------------------------------------------------------------
-- HIERARQUI - CONNECT BY
-- https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm
---------------------------------------------------------------------
SELECT last_name "Employee", CONNECT_BY_ROOT last_name "Manager",
   LEVEL-1 "Pathlen", SYS_CONNECT_BY_PATH(last_name, '/') "Path"
   FROM emp
   WHERE LEVEL > 1 --and department_id = 110
   CONNECT BY PRIOR employee_id = manager_id;

-- BASE PARA HIERARQUIA
DROP TABLE emp PURGE;

CREATE TABLE emp (
  EMPLOYEE_ID    NUMBER(4),
  LAST_NAME      VARCHAR2(10),
  MANAGER_ID     VARCHAR2(9)
);

INSERT INTO emp VALUES (100,'King',NULL);
INSERT INTO emp VALUES (101,'Kochhar',100);
INSERT INTO emp VALUES (101,'Kochhar',100);
INSERT INTO emp VALUES (108,'Greenberg',101);
INSERT INTO emp VALUES (109,'Faviet',108);
INSERT INTO emp VALUES (110,'Chen',108);
INSERT INTO emp VALUES (111,'Sciarra',108);
INSERT INTO emp VALUES (112,'Urman',108);
INSERT INTO emp VALUES (113,'Popp',108);
INSERT INTO emp VALUES (200,'Whalen',101);
COMMIT;

----------------------------------------------------------------------------------
-- ESPAÇO
----------------------------------------------------------------------------------
-- VERIFICA O TAMANHO DO OWNER DA EQUIPE
SELECT ENTITY_OWNER, SUM(SIZE_MBYTES) 
FROM BI_REPORT_ETC.VQ_TABLES_ETC  -- tabela criada pelo BI
GROUP BY ENTITY_OWNER
ORDER BY SUM(SIZE_MBYTES) DESC;

-- LISTAR AS TABELAS DO OWNER
SELECT * 
FROM BI_REPORT_ETC.VQ_TABLES_ETC  -- tabela criada pelo BI
WHERE ENTITY_OWNER='OWNER'
ORDER BY SIZE_MBYTES DESC;

-- LISTA DAS TABELAS
SELECT O.OWNER
     , O.OBJECT_NAME
     , O.CREATED
     , O.LAST_DDL_TIME
     , O.TEMPORARY
     , T.NUM_ROWS
     , T.COMPRESSION
     , 'drop table ' || o.object_name || ';'
FROM ALL_OBJECTS O
INNER JOIN ALL_TABLES T ON O.OBJECT_NAME = T.TABLE_NAME
WHERE T.OWNER = 'OWNER'
AND O.OBJECT_TYPE = 'TABLE'
ORDER BY NUM_ROWS DESC;

-- Comprimir a tabela
ALTER TABLE test_tab NOLOGGING COMPRESS FOR QUERY HIGH PCTFREE 0;

-- LIMPA A LIXEIRA
purge recyclebin;

----------------------------------------------------------------------------------
-- PROCEDURES
----------------------------------------------------------------------------------
-- CRIAÇÃO DE PROCEDURES
CREATE OR REPLACE PROCEDURE PRC_TESTE
AUTHID CURRENT_USER
IS

BEGIN -- CODIGO VAI AQUI

END PRC_TESTE;

-- EXECUTA COMANDOS NAS PROCEDURES
EXECUTE IMMEDIATE('SELECT * FROM DUAL');

-- EXECUTA COMANDOS NAS PROCEDURES COM TRATAMENTO DE ERROS
BEGIN
    EXECUTE IMMEDIATE('DROP TABLE tabela PURGE');
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;


----------------------------------------------------------------------------------
-- JOBS
----------------------------------------------------------------------------------
-- CRIA JOBS
begin
    sys.dbms_scheduler.create_job(job_name            => 'BI_CRM_USR.JOB_PROC_CAMPANHA_BANCO',
                                  job_type            => 'STORED_PROCEDURE',
                                  job_action          => 'bi_usr_mdl.pkg_acompanhamento_campanhas.p_exec_bco',
                                  start_date          => to_date('02-03-2019 09:00:00', 'dd-mm-yyyy hh24:mi:ss'),
                                  repeat_interval     => 'Freq=Daily',
                                  end_date            => to_date(null),
                                  job_class           => 'DEFAULT_JOB_CLASS',
                                  enabled             => true,
                                  auto_drop           => false,
                                  comments            => '');
end;

-- LISTA OS JOBS
SELECT * FROM all_scheduler_jobs;

-- MOSTRA OS JOBS QUE ESTÃO RODANDO
SELECT * FROM all_scheduler_jobs where state = 'RUNNING';

-- PARAR JOB
BEGIN
DBMS_SCHEDULER.STOP_JOB (job_name => 'nome do job');
END;

----------------------------------------------------------------------------------
-- TABELA TESTE
----------------------------------------------------------------------------------
DROP TABLE emp PURGE;

CREATE TABLE emp (
  empno    NUMBER(4) CONSTRAINT pk_emp PRIMARY KEY,
  ename    VARCHAR2(10),
  job      VARCHAR2(9),
  mgr      NUMBER(4),
  hiredate DATE,
  sal      NUMBER(7,2),
  comm     NUMBER(7,2),
  deptno   NUMBER(2)
);